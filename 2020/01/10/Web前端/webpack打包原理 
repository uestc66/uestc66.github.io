<!DOCTYPE html>



  


<html class="theme-next pisces use-motion" lang="zh-Hans">
<head><meta name="generator" content="Hexo 3.9.0">
  <meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
<meta name="theme-color" content="#222">









<meta http-equiv="Cache-Control" content="no-transform">
<meta http-equiv="Cache-Control" content="no-siteapp">



  <meta name="google-site-verification" content="true">








  <meta name="baidu-site-verification" content="RdqHn7VpTr">







  
  
  <link href="/lib/fancybox/source/jquery.fancybox.css?v=2.1.5" rel="stylesheet" type="text/css">







<link href="/lib/font-awesome/css/font-awesome.min.css?v=4.6.2" rel="stylesheet" type="text/css">

<link href="/css/main.css?v=5.1.4" rel="stylesheet" type="text/css">


  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png?v=5.1.4">


  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32-next.png?v=5.1.4">


  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16-next.png?v=5.1.4">


  <link rel="mask-icon" href="/images/logo.svg?v=5.1.4" color="#222">


  <link rel="manifest" href="/images/manifest.json">


  <meta name="msapplication-config" content="/images/browserconfig.xml">



  <meta name="keywords" content="Webpack,">










<meta name="description" content="转载自掘金，原文链接：https://juejin.im/post/5e116fce6fb9a047ea7472a6?utm_source=gold_browser_extension 前言[实践系列] 主要是让我们通过实践去加深对一些原理的理解。 [实践系列]前端路由 [实践系列]Babel 原理 [实践系列]实践这一次,彻底搞懂浏览器缓存机制 [实践系列]你能手写一个 Promise 吗？Ye">
<meta name="keywords" content="Webpack">
<meta property="og:type" content="article">
<meta property="og:title" content="webpack打包原理 ? 看完这篇你就懂了 !">
<meta property="og:url" content="https://uestc66.github.io/2020/01/10/Web前端/webpack打包原理 ">
<meta property="og:site_name" content="jerry.zmf&#39;s blog">
<meta property="og:description" content="转载自掘金，原文链接：https://juejin.im/post/5e116fce6fb9a047ea7472a6?utm_source=gold_browser_extension 前言[实践系列] 主要是让我们通过实践去加深对一些原理的理解。 [实践系列]前端路由 [实践系列]Babel 原理 [实践系列]实践这一次,彻底搞懂浏览器缓存机制 [实践系列]你能手写一个 Promise 吗？Ye">
<meta property="og:locale" content="zh-Hans">
<meta property="og:image" content="https://user-gold-cdn.xitu.io/2020/1/5/16f741d40eaf5b45?imageView2/0/w/1280/h/960/format/webp/ignore-error/1">
<meta property="og:updated_time" content="2020-03-16T15:42:57.078Z">
<meta name="twitter:card" content="summary">
<meta name="twitter:title" content="webpack打包原理 ? 看完这篇你就懂了 !">
<meta name="twitter:description" content="转载自掘金，原文链接：https://juejin.im/post/5e116fce6fb9a047ea7472a6?utm_source=gold_browser_extension 前言[实践系列] 主要是让我们通过实践去加深对一些原理的理解。 [实践系列]前端路由 [实践系列]Babel 原理 [实践系列]实践这一次,彻底搞懂浏览器缓存机制 [实践系列]你能手写一个 Promise 吗？Ye">
<meta name="twitter:image" content="https://user-gold-cdn.xitu.io/2020/1/5/16f741d40eaf5b45?imageView2/0/w/1280/h/960/format/webp/ignore-error/1">



<script type="text/javascript" id="hexo.configurations">
  var NexT = window.NexT || {};
  var CONFIG = {
    root: '/',
    scheme: 'Pisces',
    version: '5.1.4',
    sidebar: {"position":"left","display":"hide","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},
    fancybox: true,
    tabs: true,
    motion: {"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},
    duoshuo: {
      userId: '0',
      author: '博主'
    },
    algolia: {
      applicationID: '',
      apiKey: '',
      indexName: '',
      hits: {"per_page":10},
      labels: {"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}
    }
  };
</script>



  <link rel="canonical" href="https://uestc66.github.io/2020/01/10/Web前端/webpack打包原理 ">





  <title>webpack打包原理 ? 看完这篇你就懂了 ! | jerry.zmf's blog</title>
  








</head>

<body itemscope itemtype="http://schema.org/WebPage" lang="zh-Hans">

  
  
    
  
<div>

</div>
  <div class="container sidebar-position-left page-post-detail">
    <div class="headband"></div>

    <a href="https://github.com/uestc66"><img style="position: absolute; top: 0; right: 0; border: 0;" width="149" height="149" src="https://github.blog/wp-content/uploads/2008/12/forkme_right_orange_ff7600.png?resize=149%2C149" class="attachment-full size-full" alt="Fork me on GitHub" data-recalc-dims="1"></a>

    <header id="header" class="header" itemscope itemtype="http://schema.org/WPHeader">
      <div class="header-inner"><div class="site-brand-wrapper">
  <div class="site-meta ">
    

    <div class="custom-logo-site-title">
      <a href="/" class="brand" rel="start">
        <span class="logo-line-before"><i></i></span>
        <span class="site-title">jerry.zmf's blog</span>
        <span class="logo-line-after"><i></i></span>
      </a>
    </div>
      
        <p class="site-subtitle">心有光芒，必有远方</p>
      
  </div>

  <div class="site-nav-toggle">
    <button>
      <span class="btn-bar"></span>
      <span class="btn-bar"></span>
      <span class="btn-bar"></span>
    </button>
  </div>
</div>

<nav class="site-nav">
  

  
    <ul id="menu" class="menu">
      
        
        <li class="menu-item menu-item-home">
          <a href="/" rel="section">
            
              <i class="menu-item-icon fa fa-fw fa-home"></i> <br>
            
            首页
          </a>
        </li>
      
        
        <li class="menu-item menu-item-gateway">
          <a href="/gateway/" rel="section">
            
              <i class="menu-item-icon fa fa-fw fa-sitemap"></i> <br>
            
            门户
          </a>
        </li>
      
        
        <li class="menu-item menu-item-categories">
          <a href="/categories/" rel="section">
            
              <i class="menu-item-icon fa fa-fw fa-th"></i> <br>
            
            分类
          </a>
        </li>
      
        
        <li class="menu-item menu-item-archives">
          <a href="/archives/" rel="section">
            
              <i class="menu-item-icon fa fa-fw fa-archive"></i> <br>
            
            归档
          </a>
        </li>
      
        
        <li class="menu-item menu-item-tags">
          <a href="/tags/" rel="section">
            
              <i class="menu-item-icon fa fa-fw fa-tags"></i> <br>
            
            标签
          </a>
        </li>
      
        
        <li class="menu-item menu-item-about">
          <a href="/about/" rel="section">
            
              <i class="menu-item-icon fa fa-fw fa-user"></i> <br>
            
            关于
          </a>
        </li>
      

      
        <li class="menu-item menu-item-search">
          
            <a href="javascript:;" class="popup-trigger">
          
            
              <i class="menu-item-icon fa fa-search fa-fw"></i> <br>
            
            搜索
          </a>
        </li>
      
    </ul>
  

  
    <div class="site-search">
      
  <div class="popup search-popup local-search-popup">
  <div class="local-search-header clearfix">
    <span class="search-icon">
      <i class="fa fa-search"></i>
    </span>
    <span class="popup-btn-close">
      <i class="fa fa-times-circle"></i>
    </span>
    <div class="local-search-input-wrapper">
      <input autocomplete="off" placeholder="搜索..." spellcheck="false" type="text" id="local-search-input">
    </div>
  </div>
  <div id="local-search-result"></div>
</div>



    </div>
  
</nav>



 </div>
    </header>

    <main id="main" class="main">
      <div class="main-inner">
        <div class="content-wrap">
          <div id="content" class="content">
            

  <div id="posts" class="posts-expand">
    

  

  
  
  

  <article class="post post-type-normal" itemscope itemtype="http://schema.org/Article">
  
  
  
  <div class="post-block">
    <link itemprop="mainEntityOfPage" href="https://uestc66.github.io/2020/01/10/Web前端/webpack打包原理 ? 看完这篇你就懂了 !/">

    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">
      <meta itemprop="name" content="jerry.zmf">
      <meta itemprop="description" content>
      <meta itemprop="image" content="https://img.alicdn.com/tfs/TB1fUIudbr1gK0jSZR0XXbP8XXa-479-479.jpg_mco0.jpg">
    </span>

    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
      <meta itemprop="name" content="jerry.zmf's blog">
    </span>

    
      <header class="post-header">

        
        
          <h1 class="post-title" itemprop="name headline">webpack打包原理 ? 看完这篇你就懂了 !</h1>
        

        <div class="post-meta">
          <span class="post-time">
            
              <span class="post-meta-item-icon">
                <i class="fa fa-calendar-o"></i>
              </span>
              
                <span class="post-meta-item-text">发表于</span>
              
              <time title="创建于" itemprop="dateCreated datePublished" datetime="2020-01-10T10:35:24+08:00">
                2020-01-10
              </time>
            

            

            
          </span>

          
            <span class="post-category">
            
              <span class="post-meta-divider">|</span>
            
              <span class="post-meta-item-icon">
                <i class="fa fa-folder-o"></i>
              </span>
              
                <span class="post-meta-item-text">分类于</span>
              
              
                <span itemprop="about" itemscope itemtype="http://schema.org/Thing">
                  <a href="/categories/Web前端/" itemprop="url" rel="index">
                    <span itemprop="name">Web前端</span>
                  </a>
                </span>

                
                
              
            </span>
          

          
            
              <span class="post-comments-count">
                <span class="post-meta-divider">|</span>
                <span class="post-meta-item-icon">
                  <i class="fa fa-comment-o"></i>
                </span>
                <a href="/2020/01/10/Web前端/webpack打包原理 ? 看完这篇你就懂了 !/#comments" itemprop="discussionUrl">
                  <span class="post-comments-count valine-comment-count" data-xid="/2020/01/10/Web前端/webpack打包原理 ? 看完这篇你就懂了 !/" itemprop="commentCount"></span>
                </a>
              </span>
            
          

          
          

          
            <span class="post-meta-divider">|</span>
            <span class="page-pv"><i class="fa fa-file-o"></i>阅读数
            <span class="busuanzi-value" id="busuanzi_value_page_pv"></span>
            </span>
          

          

          

        </div>
      </header>
    

    
    
    
    <div class="post-body" itemprop="articleBody">

      
      

      
        <p><font color="#00BFFF" size="2">转载自掘金，原文链接：<a href="https://juejin.im/post/5e116fce6fb9a047ea7472a6?utm_source=gold_browser_extension" target="_blank" rel="noopener">https://juejin.im/post/5e116fce6fb9a047ea7472a6?utm_source=gold_browser_extension</a></font></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>[实践系列] 主要是让我们通过实践去加深对一些原理的理解。</p>
<p><a href="https://juejin.im/post/5c380afde51d4552232fb077" target="_blank" rel="noopener">[实践系列]前端路由</a></p>
<p><a href="https://juejin.im/post/5c3beaee6fb9a04a027a9641" target="_blank" rel="noopener">[实践系列]Babel 原理</a></p>
<p><a href="https://juejin.im/post/5c4528a6f265da611a4822cc" target="_blank" rel="noopener">[实践系列]实践这一次,彻底搞懂浏览器缓存机制</a></p>
<p><a href="https://juejin.im/post/5c41297cf265da613356d4ec" target="_blank" rel="noopener">[实践系列]你能手写一个 Promise 吗？Yes I promise。</a></p>
<h2 id="什么是-webpack"><a href="#什么是-webpack" class="headerlink" title="什么是 webpack ?"></a>什么是 webpack ?</h2><blockquote>
<p>本质上,webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。当 webpack 处理应用程序时,它会递归地构建一个依赖关系图(dependency graph),其中包含应用程序需要的每个模块,然后将所有这些模块打包成一个或多个 bundle。</p>
<p>webpack 就像一条生产线,要经过一系列处理流程后才能将源文件转换成输出结果。 这条生产线上的每个处理流程的职责都是单一的,多个流程之间有存在依赖关系,只有完成当前处理后才能交给下一个流程去处理。 插件就像是一个插入到生产线中的一个功能,在特定的时机对生产线上的资源做处理。<br>webpack 通过 Tapable 来组织这条复杂的生产线。 webpack 在运行过程中会广播事件,插件只需要监听它所关心的事件,就能加入到这条生产线中,去改变生产线的运作。 webpack 的事件流机制保证了插件的有序性,使得整个系统扩展性很好。 – 深入浅出 webpack 吴浩麟</p>
</blockquote>
<p><img src="https://user-gold-cdn.xitu.io/2020/1/5/16f741d40eaf5b45?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="webpack"></p>
<h2 id="webpack-核心概念"><a href="#webpack-核心概念" class="headerlink" title="webpack 核心概念"></a>webpack 核心概念</h2><h3 id="Entry"><a href="#Entry" class="headerlink" title="Entry"></a>Entry</h3><p>入口起点(entry point)指示 webpack 应该使用哪个模块,来作为构建其内部依赖图的开始。</p>
<p>进入入口起点后,webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的。</p>
<p>每个依赖项随即被处理,最后输出到称之为 bundles 的文件中。</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>output 属性告诉 webpack 在哪里输出它所创建的 bundles,以及如何命名这些文件,默认值为 ./dist。</p>
<p>基本上,整个应用程序结构,都会被编译到你指定的输出路径的文件夹中。</p>
<h3 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h3><p>模块,在 Webpack 里一切皆模块,一个模块对应着一个文件。Webpack 会从配置的 Entry 开始递归找出所有依赖的模块。</p>
<h3 id="Chunk"><a href="#Chunk" class="headerlink" title="Chunk"></a>Chunk</h3><p>代码块,一个 Chunk 由多个模块组合而成,用于代码合并与分割。</p>
<h3 id="Loader"><a href="#Loader" class="headerlink" title="Loader"></a>Loader</h3><p>loader 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。</p>
<p>loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块,然后你就可以利用 webpack 的打包能力,对它们进行处理。</p>
<p>本质上,webpack loader 将所有类型的文件,转换为应用程序的依赖图（和最终的 bundle）可以直接引用的模块。</p>
<h3 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h3><p>loader 被用于转换某些类型的模块,而插件则可以用于执行范围更广的任务。</p>
<p>插件的范围包括,从打包优化和压缩,一直到重新定义环境中的变量。插件接口功能极其强大,可以用来处理各种各样的任务。</p>
<h2 id="webpack-构建流程"><a href="#webpack-构建流程" class="headerlink" title="webpack 构建流程"></a>webpack 构建流程</h2><p>Webpack 的运行流程是一个串行的过程,从启动到结束会依次执行以下流程 :</p>
<ol>
<li>初始化参数：从配置文件和 Shell 语句中读取与合并参数,得出最终的参数。</li>
<li>开始编译：用上一步得到的参数初始化 Compiler 对象,加载所有配置的插件,执行对象的 run 方法开始执行编译。</li>
<li>确定入口：根据配置中的 entry 找出所有的入口文件。</li>
<li>编译模块：从入口文件出发,调用所有配置的 Loader 对模块进行翻译,再找出该模块依赖的模块,再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理。</li>
<li>完成模块编译：在经过第 4 步使用 Loader 翻译完所有模块后,得到了每个模块被翻译后的最终内容以及它们之间的依赖关系。</li>
<li>输出资源：根据入口和模块之间的依赖关系,组装成一个个包含多个模块的 Chunk,再把每个 Chunk 转换成一个单独的文件加入到输出列表,这步是可以修改输出内容的最后机会。</li>
<li>输出完成：在确定好输出内容后,根据配置确定输出的路径和文件名,把文件内容写入到文件系统。</li>
</ol>
<p>在以上过程中,Webpack 会在特定的时间点广播出特定的事件,插件在监听到感兴趣的事件后会执行特定的逻辑,并且插件可以调用 Webpack 提供的 API 改变 Webpack 的运行结果。</p>
<h2 id="实践加深理解-撸一个简易-webpack"><a href="#实践加深理解-撸一个简易-webpack" class="headerlink" title="实践加深理解,撸一个简易 webpack"></a>实践加深理解,撸一个简易 webpack</h2><h3 id="1-定义-Compiler-类"><a href="#1-定义-Compiler-类" class="headerlink" title="1. 定义 Compiler 类"></a>1. 定义 Compiler 类</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Compiler</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">    <span class="comment">// webpack 配置</span></span><br><span class="line">    <span class="keyword">const</span> &#123; entry, output &#125; = options</span><br><span class="line">    <span class="comment">// 入口</span></span><br><span class="line">    <span class="keyword">this</span>.entry = entry</span><br><span class="line">    <span class="comment">// 出口</span></span><br><span class="line">    <span class="keyword">this</span>.output = output</span><br><span class="line">    <span class="comment">// 模块</span></span><br><span class="line">    <span class="keyword">this</span>.modules = []</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 构建启动</span></span><br><span class="line">  run() &#123;&#125;</span><br><span class="line">  <span class="comment">// 重写 require函数,输出bundle</span></span><br><span class="line">  generate() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h3 id="2-解析入口文件-获取-AST"><a href="#2-解析入口文件-获取-AST" class="headerlink" title="2. 解析入口文件,获取 AST"></a>2. 解析入口文件,获取 AST</h3><p>我们这里使用@babel/parser,这是 babel7 的工具,来帮助我们分析内部的语法,包括 es6,返回一个 AST 抽象语法树。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">    filename: <span class="string">'main.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">复制代码</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">'@babel/parser'</span>)</span><br><span class="line"><span class="keyword">const</span> options = <span class="built_in">require</span>(<span class="string">'./webpack.config'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Parser = &#123;</span><br><span class="line">  getAst: <span class="function"><span class="params">path</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 读取入口文件</span></span><br><span class="line">    <span class="keyword">const</span> content = fs.readFileSync(path, <span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="comment">// 将文件内容转为AST抽象语法树</span></span><br><span class="line">    <span class="keyword">return</span> parser.parse(content, &#123;</span><br><span class="line">      sourceType: <span class="string">'module'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Compiler</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">    <span class="comment">// webpack 配置</span></span><br><span class="line">    <span class="keyword">const</span> &#123; entry, output &#125; = options</span><br><span class="line">    <span class="comment">// 入口</span></span><br><span class="line">    <span class="keyword">this</span>.entry = entry</span><br><span class="line">    <span class="comment">// 出口</span></span><br><span class="line">    <span class="keyword">this</span>.output = output</span><br><span class="line">    <span class="comment">// 模块</span></span><br><span class="line">    <span class="keyword">this</span>.modules = []</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 构建启动</span></span><br><span class="line">  run() &#123;</span><br><span class="line">    <span class="keyword">const</span> ast = Parser.getAst(<span class="keyword">this</span>.entry)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 重写 require函数,输出bundle</span></span><br><span class="line">  generate() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Compiler(options).run()</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h3 id="3-找出所有依赖模块"><a href="#3-找出所有依赖模块" class="headerlink" title="3. 找出所有依赖模块"></a>3. 找出所有依赖模块</h3><p>Babel 提供了@babel/traverse(遍历)方法维护这 AST 树的整体状态,我们这里使用它来帮我们找出依赖模块。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> options = <span class="built_in">require</span>(<span class="string">'./webpack.config'</span>)</span><br><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">'@babel/parser'</span>)</span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">'@babel/traverse'</span>).default</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Parser = &#123;</span><br><span class="line">  getAst: <span class="function"><span class="params">path</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 读取入口文件</span></span><br><span class="line">    <span class="keyword">const</span> content = fs.readFileSync(path, <span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="comment">// 将文件内容转为AST抽象语法树</span></span><br><span class="line">    <span class="keyword">return</span> parser.parse(content, &#123;</span><br><span class="line">      sourceType: <span class="string">'module'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  getDependecies: <span class="function">(<span class="params">ast, filename</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> dependecies = &#123;&#125;</span><br><span class="line">    <span class="comment">// 遍历所有的 import 模块,存入dependecies</span></span><br><span class="line">    traverse(ast, &#123;</span><br><span class="line">      <span class="comment">// 类型为 ImportDeclaration 的 AST 节点 (即为import 语句)</span></span><br><span class="line">      ImportDeclaration(&#123; node &#125;) &#123;</span><br><span class="line">        <span class="keyword">const</span> dirname = path.dirname(filename)</span><br><span class="line">        <span class="comment">// 保存依赖模块路径,之后生成依赖关系图需要用到</span></span><br><span class="line">        <span class="keyword">const</span> filepath = <span class="string">'./'</span> + path.join(dirname, node.source.value)</span><br><span class="line">        dependecies[node.source.value] = filepath</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> dependecies</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Compiler</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">    <span class="comment">// webpack 配置</span></span><br><span class="line">    <span class="keyword">const</span> &#123; entry, output &#125; = options</span><br><span class="line">    <span class="comment">// 入口</span></span><br><span class="line">    <span class="keyword">this</span>.entry = entry</span><br><span class="line">    <span class="comment">// 出口</span></span><br><span class="line">    <span class="keyword">this</span>.output = output</span><br><span class="line">    <span class="comment">// 模块</span></span><br><span class="line">    <span class="keyword">this</span>.modules = []</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 构建启动</span></span><br><span class="line">  run() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; getAst, getDependecies &#125; = Parser</span><br><span class="line">    <span class="keyword">const</span> ast = getAst(<span class="keyword">this</span>.entry)</span><br><span class="line">    <span class="keyword">const</span> dependecies = getDependecies(ast, <span class="keyword">this</span>.entry)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 重写 require函数,输出bundle</span></span><br><span class="line">  generate() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Compiler(options).run()</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h3 id="4-AST-转换为-code"><a href="#4-AST-转换为-code" class="headerlink" title="4. AST 转换为 code"></a>4. AST 转换为 code</h3><p>将 AST 语法树转换为浏览器可执行代码,我们这里使用@babel/core 和 @babel/preset-env。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> options = <span class="built_in">require</span>(<span class="string">'./webpack.config'</span>)</span><br><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">'@babel/parser'</span>)</span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">'@babel/traverse'</span>).default</span><br><span class="line"><span class="keyword">const</span> &#123; transformFromAst &#125; = <span class="built_in">require</span>(<span class="string">'@babel/core'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Parser = &#123;</span><br><span class="line">  getAst: <span class="function"><span class="params">path</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 读取入口文件</span></span><br><span class="line">    <span class="keyword">const</span> content = fs.readFileSync(path, <span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="comment">// 将文件内容转为AST抽象语法树</span></span><br><span class="line">    <span class="keyword">return</span> parser.parse(content, &#123;</span><br><span class="line">      sourceType: <span class="string">'module'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  getDependecies: <span class="function">(<span class="params">ast, filename</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> dependecies = &#123;&#125;</span><br><span class="line">    <span class="comment">// 遍历所有的 import 模块,存入dependecies</span></span><br><span class="line">    traverse(ast, &#123;</span><br><span class="line">      <span class="comment">// 类型为 ImportDeclaration 的 AST 节点 (即为import 语句)</span></span><br><span class="line">      ImportDeclaration(&#123; node &#125;) &#123;</span><br><span class="line">        <span class="keyword">const</span> dirname = path.dirname(filename)</span><br><span class="line">        <span class="comment">// 保存依赖模块路径,之后生成依赖关系图需要用到</span></span><br><span class="line">        <span class="keyword">const</span> filepath = <span class="string">'./'</span> + path.join(dirname, node.source.value)</span><br><span class="line">        dependecies[node.source.value] = filepath</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> dependecies</span><br><span class="line">  &#125;,</span><br><span class="line">  getCode: <span class="function"><span class="params">ast</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// AST转换为code</span></span><br><span class="line">    <span class="keyword">const</span> &#123; code &#125; = transformFromAst(ast, <span class="literal">null</span>, &#123;</span><br><span class="line">      presets: [<span class="string">'@babel/preset-env'</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> code</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Compiler</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">    <span class="comment">// webpack 配置</span></span><br><span class="line">    <span class="keyword">const</span> &#123; entry, output &#125; = options</span><br><span class="line">    <span class="comment">// 入口</span></span><br><span class="line">    <span class="keyword">this</span>.entry = entry</span><br><span class="line">    <span class="comment">// 出口</span></span><br><span class="line">    <span class="keyword">this</span>.output = output</span><br><span class="line">    <span class="comment">// 模块</span></span><br><span class="line">    <span class="keyword">this</span>.modules = []</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 构建启动</span></span><br><span class="line">  run() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; getAst, getDependecies, getCode &#125; = Parser</span><br><span class="line">    <span class="keyword">const</span> ast = getAst(<span class="keyword">this</span>.entry)</span><br><span class="line">    <span class="keyword">const</span> dependecies = getDependecies(ast, <span class="keyword">this</span>.entry)</span><br><span class="line">    <span class="keyword">const</span> code = getCode(ast)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 重写 require函数,输出bundle</span></span><br><span class="line">  generate() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Compiler(options).run()</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h3 id="5-递归解析所有依赖项-生成依赖关系图"><a href="#5-递归解析所有依赖项-生成依赖关系图" class="headerlink" title="5. 递归解析所有依赖项,生成依赖关系图"></a>5. 递归解析所有依赖项,生成依赖关系图</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> options = <span class="built_in">require</span>(<span class="string">'./webpack.config'</span>)</span><br><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">'@babel/parser'</span>)</span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">'@babel/traverse'</span>).default</span><br><span class="line"><span class="keyword">const</span> &#123; transformFromAst &#125; = <span class="built_in">require</span>(<span class="string">'@babel/core'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Parser = &#123;</span><br><span class="line">  getAst: <span class="function"><span class="params">path</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 读取入口文件</span></span><br><span class="line">    <span class="keyword">const</span> content = fs.readFileSync(path, <span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="comment">// 将文件内容转为AST抽象语法树</span></span><br><span class="line">    <span class="keyword">return</span> parser.parse(content, &#123;</span><br><span class="line">      sourceType: <span class="string">'module'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  getDependecies: <span class="function">(<span class="params">ast, filename</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> dependecies = &#123;&#125;</span><br><span class="line">    <span class="comment">// 遍历所有的 import 模块,存入dependecies</span></span><br><span class="line">    traverse(ast, &#123;</span><br><span class="line">      <span class="comment">// 类型为 ImportDeclaration 的 AST 节点 (即为import 语句)</span></span><br><span class="line">      ImportDeclaration(&#123; node &#125;) &#123;</span><br><span class="line">        <span class="keyword">const</span> dirname = path.dirname(filename)</span><br><span class="line">        <span class="comment">// 保存依赖模块路径,之后生成依赖关系图需要用到</span></span><br><span class="line">        <span class="keyword">const</span> filepath = <span class="string">'./'</span> + path.join(dirname, node.source.value)</span><br><span class="line">        dependecies[node.source.value] = filepath</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> dependecies</span><br><span class="line">  &#125;,</span><br><span class="line">  getCode: <span class="function"><span class="params">ast</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// AST转换为code</span></span><br><span class="line">    <span class="keyword">const</span> &#123; code &#125; = transformFromAst(ast, <span class="literal">null</span>, &#123;</span><br><span class="line">      presets: [<span class="string">'@babel/preset-env'</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> code</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Compiler</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">    <span class="comment">// webpack 配置</span></span><br><span class="line">    <span class="keyword">const</span> &#123; entry, output &#125; = options</span><br><span class="line">    <span class="comment">// 入口</span></span><br><span class="line">    <span class="keyword">this</span>.entry = entry</span><br><span class="line">    <span class="comment">// 出口</span></span><br><span class="line">    <span class="keyword">this</span>.output = output</span><br><span class="line">    <span class="comment">// 模块</span></span><br><span class="line">    <span class="keyword">this</span>.modules = []</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 构建启动</span></span><br><span class="line">  run() &#123;</span><br><span class="line">    <span class="comment">// 解析入口文件</span></span><br><span class="line">    <span class="keyword">const</span> info = <span class="keyword">this</span>.build(<span class="keyword">this</span>.entry)</span><br><span class="line">    <span class="keyword">this</span>.modules.push(info)</span><br><span class="line">    <span class="keyword">this</span>.modules.forEach(<span class="function">(<span class="params">&#123; dependecies &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 判断有依赖对象,递归解析所有依赖项</span></span><br><span class="line">      <span class="keyword">if</span> (dependecies) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> dependency <span class="keyword">in</span> dependecies) &#123;</span><br><span class="line">          <span class="keyword">this</span>.modules.push(<span class="keyword">this</span>.build(dependecies[dependency]))</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 生成依赖关系图</span></span><br><span class="line">    <span class="keyword">const</span> dependencyGraph = <span class="keyword">this</span>.modules.reduce(</span><br><span class="line">      (graph, item) =&gt; (&#123;</span><br><span class="line">        ...graph,</span><br><span class="line">        <span class="comment">// 使用文件路径作为每个模块的唯一标识符,保存对应模块的依赖对象和文件内容</span></span><br><span class="line">        [item.filename]: &#123;</span><br><span class="line">          dependecies: item.dependecies,</span><br><span class="line">          code: item.code</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;),</span><br><span class="line">      &#123;&#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  build(filename) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; getAst, getDependecies, getCode &#125; = Parser</span><br><span class="line">    <span class="keyword">const</span> ast = getAst(filename)</span><br><span class="line">    <span class="keyword">const</span> dependecies = getDependecies(ast, filename)</span><br><span class="line">    <span class="keyword">const</span> code = getCode(ast)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// 文件路径,可以作为每个模块的唯一标识符</span></span><br><span class="line">      filename,</span><br><span class="line">      <span class="comment">// 依赖对象,保存着依赖模块路径</span></span><br><span class="line">      dependecies,</span><br><span class="line">      <span class="comment">// 文件内容</span></span><br><span class="line">      code</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 重写 require函数,输出bundle</span></span><br><span class="line">  generate() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Compiler(options).run()</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h3 id="6-重写-require-函数-输出-bundle"><a href="#6-重写-require-函数-输出-bundle" class="headerlink" title="6. 重写 require 函数,输出 bundle"></a>6. 重写 require 函数,输出 bundle</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> options = <span class="built_in">require</span>(<span class="string">'./webpack.config'</span>)</span><br><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">'@babel/parser'</span>)</span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">'@babel/traverse'</span>).default</span><br><span class="line"><span class="keyword">const</span> &#123; transformFromAst &#125; = <span class="built_in">require</span>(<span class="string">'@babel/core'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Parser = &#123;</span><br><span class="line">  getAst: <span class="function"><span class="params">path</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 读取入口文件</span></span><br><span class="line">    <span class="keyword">const</span> content = fs.readFileSync(path, <span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="comment">// 将文件内容转为AST抽象语法树</span></span><br><span class="line">    <span class="keyword">return</span> parser.parse(content, &#123;</span><br><span class="line">      sourceType: <span class="string">'module'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  getDependecies: <span class="function">(<span class="params">ast, filename</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> dependecies = &#123;&#125;</span><br><span class="line">    <span class="comment">// 遍历所有的 import 模块,存入dependecies</span></span><br><span class="line">    traverse(ast, &#123;</span><br><span class="line">      <span class="comment">// 类型为 ImportDeclaration 的 AST 节点 (即为import 语句)</span></span><br><span class="line">      ImportDeclaration(&#123; node &#125;) &#123;</span><br><span class="line">        <span class="keyword">const</span> dirname = path.dirname(filename)</span><br><span class="line">        <span class="comment">// 保存依赖模块路径,之后生成依赖关系图需要用到</span></span><br><span class="line">        <span class="keyword">const</span> filepath = <span class="string">'./'</span> + path.join(dirname, node.source.value)</span><br><span class="line">        dependecies[node.source.value] = filepath</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> dependecies</span><br><span class="line">  &#125;,</span><br><span class="line">  getCode: <span class="function"><span class="params">ast</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// AST转换为code</span></span><br><span class="line">    <span class="keyword">const</span> &#123; code &#125; = transformFromAst(ast, <span class="literal">null</span>, &#123;</span><br><span class="line">      presets: [<span class="string">'@babel/preset-env'</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> code</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Compiler</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">    <span class="comment">// webpack 配置</span></span><br><span class="line">    <span class="keyword">const</span> &#123; entry, output &#125; = options</span><br><span class="line">    <span class="comment">// 入口</span></span><br><span class="line">    <span class="keyword">this</span>.entry = entry</span><br><span class="line">    <span class="comment">// 出口</span></span><br><span class="line">    <span class="keyword">this</span>.output = output</span><br><span class="line">    <span class="comment">// 模块</span></span><br><span class="line">    <span class="keyword">this</span>.modules = []</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 构建启动</span></span><br><span class="line">  run() &#123;</span><br><span class="line">    <span class="comment">// 解析入口文件</span></span><br><span class="line">    <span class="keyword">const</span> info = <span class="keyword">this</span>.build(<span class="keyword">this</span>.entry)</span><br><span class="line">    <span class="keyword">this</span>.modules.push(info)</span><br><span class="line">    <span class="keyword">this</span>.modules.forEach(<span class="function">(<span class="params">&#123; dependecies &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 判断有依赖对象,递归解析所有依赖项</span></span><br><span class="line">      <span class="keyword">if</span> (dependecies) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> dependency <span class="keyword">in</span> dependecies) &#123;</span><br><span class="line">          <span class="keyword">this</span>.modules.push(<span class="keyword">this</span>.build(dependecies[dependency]))</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 生成依赖关系图</span></span><br><span class="line">    <span class="keyword">const</span> dependencyGraph = <span class="keyword">this</span>.modules.reduce(</span><br><span class="line">      (graph, item) =&gt; (&#123;</span><br><span class="line">        ...graph,</span><br><span class="line">        <span class="comment">// 使用文件路径作为每个模块的唯一标识符,保存对应模块的依赖对象和文件内容</span></span><br><span class="line">        [item.filename]: &#123;</span><br><span class="line">          dependecies: item.dependecies,</span><br><span class="line">          code: item.code</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;),</span><br><span class="line">      &#123;&#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">this</span>.generate(dependencyGraph)</span><br><span class="line">  &#125;</span><br><span class="line">  build(filename) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; getAst, getDependecies, getCode &#125; = Parser</span><br><span class="line">    <span class="keyword">const</span> ast = getAst(filename)</span><br><span class="line">    <span class="keyword">const</span> dependecies = getDependecies(ast, filename)</span><br><span class="line">    <span class="keyword">const</span> code = getCode(ast)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// 文件路径,可以作为每个模块的唯一标识符</span></span><br><span class="line">      filename,</span><br><span class="line">      <span class="comment">// 依赖对象,保存着依赖模块路径</span></span><br><span class="line">      dependecies,</span><br><span class="line">      <span class="comment">// 文件内容</span></span><br><span class="line">      code</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 重写 require函数 (浏览器不能识别commonjs语法),输出bundle</span></span><br><span class="line">  generate(code) &#123;</span><br><span class="line">    <span class="comment">// 输出文件路径</span></span><br><span class="line">    <span class="keyword">const</span> filePath = path.join(<span class="keyword">this</span>.output.path, <span class="keyword">this</span>.output.filename)</span><br><span class="line">    <span class="comment">// 懵逼了吗? 没事,下一节我们捋一捋</span></span><br><span class="line">    <span class="keyword">const</span> bundle = <span class="string">`(function(graph)&#123;</span></span><br><span class="line"><span class="string">      function require(module)&#123;</span></span><br><span class="line"><span class="string">        function localRequire(relativePath)&#123;</span></span><br><span class="line"><span class="string">          return require(graph[module].dependecies[relativePath])</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        var exports = &#123;&#125;;</span></span><br><span class="line"><span class="string">        (function(require,exports,code)&#123;</span></span><br><span class="line"><span class="string">          eval(code)</span></span><br><span class="line"><span class="string">        &#125;)(localRequire,exports,graph[module].code);</span></span><br><span class="line"><span class="string">        return exports;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">      require('<span class="subst">$&#123;<span class="keyword">this</span>.entry&#125;</span>')</span></span><br><span class="line"><span class="string">    &#125;)(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(code)&#125;</span>)`</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把文件内容写入到文件系统</span></span><br><span class="line">    fs.writeFileSync(filePath, bundle, <span class="string">'utf-8'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Compiler(options).run()</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h3 id="7-看完这节-彻底搞懂-bundle-实现"><a href="#7-看完这节-彻底搞懂-bundle-实现" class="headerlink" title="7. 看完这节,彻底搞懂 bundle 实现"></a>7. 看完这节,彻底搞懂 bundle 实现</h3><p>我们通过下面的例子来进行讲解,先死亡凝视 30 秒</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">graph</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">require</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">localRequire</span>(<span class="params">relativePath</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">require</span>(graph[moduleId].dependecies[relativePath])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> exports = &#123;&#125;</span><br><span class="line">    ;(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, code</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">eval</span>(code)</span><br><span class="line">    &#125;)(localRequire, exports, graph[moduleId].code)</span><br><span class="line">    <span class="keyword">return</span> exports</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'./src/index.js'</span>)</span><br><span class="line">&#125;)(&#123;</span><br><span class="line">  <span class="string">'./src/index.js'</span>: &#123;</span><br><span class="line">    dependecies: &#123; <span class="string">'./hello.js'</span>: <span class="string">'./src/hello.js'</span> &#125;,</span><br><span class="line">    code: <span class="string">'"use strict";\n\nvar _hello = require("./hello.js");\n\ndocument.write((0, _hello.say)("webpack"));'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'./src/hello.js'</span>: &#123;</span><br><span class="line">    dependecies: &#123;&#125;,</span><br><span class="line">    code:</span><br><span class="line">      <span class="string">'"use strict";\n\nObject.defineProperty(exports, "__esModule", &#123;\n  value: true\n&#125;);\nexports.say = say;\n\nfunction say(name) &#123;\n  return "hello ".concat(name);\n&#125;'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h4 id="step-1-从入口文件开始执行"><a href="#step-1-从入口文件开始执行" class="headerlink" title="step 1 : 从入口文件开始执行"></a>step 1 : 从入口文件开始执行</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个立即执行函数,传入生成的依赖关系图</span></span><br><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">graph</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 重写require函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">require</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(moduleId) <span class="comment">// ./src/index.js</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 从入口文件开始执行</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'./src/index.js'</span>)</span><br><span class="line">&#125;)(&#123;</span><br><span class="line">  <span class="string">'./src/index.js'</span>: &#123;</span><br><span class="line">    dependecies: &#123; <span class="string">'./hello.js'</span>: <span class="string">'./src/hello.js'</span> &#125;,</span><br><span class="line">    code: <span class="string">'"use strict";\n\nvar _hello = require("./hello.js");\n\ndocument.write((0, _hello.say)("webpack"));'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'./src/hello.js'</span>: &#123;</span><br><span class="line">    dependecies: &#123;&#125;,</span><br><span class="line">    code:</span><br><span class="line">      <span class="string">'"use strict";\n\nObject.defineProperty(exports, "__esModule", &#123;\n  value: true\n&#125;);\nexports.say = say;\n\nfunction say(name) &#123;\n  return "hello ".concat(name);\n&#125;'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h4 id="step-2-使用-eval-执行代码"><a href="#step-2-使用-eval-执行代码" class="headerlink" title="step 2 : 使用 eval 执行代码"></a>step 2 : 使用 eval 执行代码</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个立即执行函数,传入生成的依赖关系图</span></span><br><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">graph</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 重写require函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">require</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line">    ;(<span class="function"><span class="keyword">function</span>(<span class="params">code</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(code) <span class="comment">// "use strict";\n\nvar _hello = require("./hello.js");\n\ndocument.write((0, _hello.say)("webpack"));</span></span><br><span class="line">      <span class="built_in">eval</span>(code) <span class="comment">// Uncaught TypeError: Cannot read property 'code' of undefined</span></span><br><span class="line">    &#125;)(graph[moduleId].code)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 从入口文件开始执行</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'./src/index.js'</span>)</span><br><span class="line">&#125;)(&#123;</span><br><span class="line">  <span class="string">'./src/index.js'</span>: &#123;</span><br><span class="line">    dependecies: &#123; <span class="string">'./hello.js'</span>: <span class="string">'./src/hello.js'</span> &#125;,</span><br><span class="line">    code: <span class="string">'"use strict";\n\nvar _hello = require("./hello.js");\n\ndocument.write((0, _hello.say)("webpack"));'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'./src/hello.js'</span>: &#123;</span><br><span class="line">    dependecies: &#123;&#125;,</span><br><span class="line">    code:</span><br><span class="line">      <span class="string">'"use strict";\n\nObject.defineProperty(exports, "__esModule", &#123;\n  value: true\n&#125;);\nexports.say = say;\n\nfunction say(name) &#123;\n  return "hello ".concat(name);\n&#125;'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>可以看到,我们在执行”./src/index.js”文件代码的时候报错了,这是因为 index.js 里引用依赖 hello.js,而我们没有对依赖进行处理,接下来我们对依赖引用进行处理。</p>
<h4 id="step-3-依赖对象寻址映射-获取-exports-对象"><a href="#step-3-依赖对象寻址映射-获取-exports-对象" class="headerlink" title="step 3 : 依赖对象寻址映射,获取 exports 对象"></a>step 3 : 依赖对象寻址映射,获取 exports 对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个立即执行函数,传入生成的依赖关系图</span></span><br><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">graph</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 重写require函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">require</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 找到对应moduleId的依赖对象,调用require函数,eval执行,拿到exports对象</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">localRequire</span>(<span class="params">relativePath</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">require</span>(graph[moduleId].dependecies[relativePath]) <span class="comment">// &#123;__esModule: true, say: ƒ say(name)&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义exports对象</span></span><br><span class="line">    <span class="keyword">var</span> exports = &#123;&#125;</span><br><span class="line">    ;(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, code</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// commonjs语法使用module.exports暴露实现,我们传入的exports对象会捕获依赖对象(hello.js)暴露的实现(exports.say = say)并写入</span></span><br><span class="line">      <span class="built_in">eval</span>(code)</span><br><span class="line">    &#125;)(localRequire, exports, graph[moduleId].code)</span><br><span class="line">    <span class="comment">// 暴露exports对象,即暴露依赖对象对应的实现</span></span><br><span class="line">    <span class="keyword">return</span> exports</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 从入口文件开始执行</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'./src/index.js'</span>)</span><br><span class="line">&#125;)(&#123;</span><br><span class="line">  <span class="string">'./src/index.js'</span>: &#123;</span><br><span class="line">    dependecies: &#123; <span class="string">'./hello.js'</span>: <span class="string">'./src/hello.js'</span> &#125;,</span><br><span class="line">    code: <span class="string">'"use strict";\n\nvar _hello = require("./hello.js");\n\ndocument.write((0, _hello.say)("webpack"));'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'./src/hello.js'</span>: &#123;</span><br><span class="line">    dependecies: &#123;&#125;,</span><br><span class="line">    code:</span><br><span class="line">      <span class="string">'"use strict";\n\nObject.defineProperty(exports, "__esModule", &#123;\n  value: true\n&#125;);\nexports.say = say;\n\nfunction say(name) &#123;\n  return "hello ".concat(name);\n&#125;'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>这下应该明白了吧 ~ 可以直接复制上面代码到控制台输出哦~</p>
<p><a href="https://github.com/webfansplz/article/tree/master/easy-webpack" target="_blank" rel="noopener">完整代码地址戳我 👈</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>Webpack 是一个庞大的 Node.js 应用,如果你阅读过它的源码,你会发现实现一个完整的 Webpack 需要编写非常多的代码。 但你无需了解所有的细节,只需了解其整体架构和部分细节即可。</p>
<p>对 Webpack 的使用者来说,它是一个简单强大的工具； 对 Webpack 的开发者来说,它是一个扩展性的高系统。</p>
<p>Webpack 之所以能成功,在于它把复杂的实现隐藏了起来,给用户暴露出的只是一个简单的工具,让用户能快速达成目的。 同时整体架构设计合理,扩展性高,开发扩展难度不高,通过社区补足了大量缺失的功能,让 Webpack 几乎能胜任任何场景。</p>
</blockquote>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.webpackjs.com/" target="_blank" rel="noopener">webpack 中文文档</a></p>
<p><a href="https://webpack.wuhaolin.cn/" target="_blank" rel="noopener">深入浅出 webpack</a></p>

      
    </div>
    
    
    

    

    

    
      <div>
        <ul class="post-copyright">
  <li class="post-copyright-author">
    <strong>本文作者：</strong>
    jerry.zmf
  </li>
  <li class="post-copyright-link">
    <strong>本文链接：</strong>
    <a href="https://uestc66.github.io/2020/01/10/Web前端/webpack打包原理 ? 看完这篇你就懂了 !/" title="webpack打包原理 ? 看完这篇你就懂了 !">https://uestc66.github.io/2020/01/10/Web前端/webpack打包原理 ? 看完这篇你就懂了 !/</a>
  </li>
  <li class="post-copyright-license">
    <strong>版权声明： </strong>
    本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/3.0/" rel="external nofollow" target="_blank">CC BY-NC-SA 3.0</a> 许可协议。转载请注明出处！
  </li>
</ul>

      </div>
    


    
      <div>
          
      </div>
    

    <footer class="post-footer">
      
        <div class="post-tags">
          
            <a href="/tags/Webpack/" rel="tag"><i class="fa fa-tag"></i> Webpack</a>
          
        </div>
      

      
      
      

      
        <div class="post-nav">
          <div class="post-nav-next post-nav-item">
            
              <a href="/2020/01/07/数据结构与算法/排序/" rel="next" title="排序">
                <i class="fa fa-chevron-left"></i> 排序
              </a>
            
          </div>

          <span class="post-nav-divider"></span>

          <div class="post-nav-prev post-nav-item">
            
              <a href="/2020/01/31/Node.js/在生产环境运行 PM2 & Node.js/" rel="prev" title="在生产环境运行 PM2 & Node.js">
                在生产环境运行 PM2 & Node.js <i class="fa fa-chevron-right"></i>
              </a>
            
          </div>
        </div>
      

      
      
    </footer>
  </div>
  
  
  
  </article>



    <div class="post-spread">
      
    </div>
  </div>


          </div>
          


          

  
    <div class="comments" id="comments">
    </div>
  



        </div>
        
          
  
  <div class="sidebar-toggle">
    <div class="sidebar-toggle-line-wrap">
      <span class="sidebar-toggle-line sidebar-toggle-line-first"></span>
      <span class="sidebar-toggle-line sidebar-toggle-line-middle"></span>
      <span class="sidebar-toggle-line sidebar-toggle-line-last"></span>
    </div>
  </div>

  <aside id="sidebar" class="sidebar">
    
    <div class="sidebar-inner">

      

      
        <ul class="sidebar-nav motion-element">
          <li class="sidebar-nav-toc sidebar-nav-active" data-target="post-toc-wrap">
            文章目录
          </li>
          <li class="sidebar-nav-overview" data-target="site-overview-wrap">
            站点概览
          </li>
        </ul>
      

      <section class="site-overview-wrap sidebar-panel">
        <div class="site-overview">
          <div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person">
            
              <img class="site-author-image" itemprop="image" src="https://img.alicdn.com/tfs/TB1fUIudbr1gK0jSZR0XXbP8XXa-479-479.jpg_mco0.jpg" alt="jerry.zmf">
            
              <p class="site-author-name" itemprop="name">jerry.zmf</p>
              <p class="site-description motion-element" itemprop="description"></p>
          </div>

          <nav class="site-state motion-element">

            
              <div class="site-state-item site-state-posts">
              
                <a href="/archives/">
              
                  <span class="site-state-item-count">59</span>
                  <span class="site-state-item-name">日志</span>
                </a>
              </div>
            

            
              
              
              <div class="site-state-item site-state-categories">
                <a href="/categories/index.html">
                  <span class="site-state-item-count">7</span>
                  <span class="site-state-item-name">分类</span>
                </a>
              </div>
            

            
              
              
              <div class="site-state-item site-state-tags">
                <a href="/tags/index.html">
                  <span class="site-state-item-count">10</span>
                  <span class="site-state-item-name">标签</span>
                </a>
              </div>
            

          </nav>

          

          
            <div class="links-of-author motion-element">
                
                  <span class="links-of-author-item">
                    <a href="https://github.com/uestc66" target="_blank" title="GitHub">
                      
                        <i class="fa fa-fw fa-github"></i>GitHub</a>
                  </span>
                
                  <span class="links-of-author-item">
                    <a href="https://www.zhihu.com/people/jerry-8-34-77/" target="_blank" title="知乎">
                      
                        <i class="fa fa-fw fa-gratipay"></i>知乎</a>
                  </span>
                
                  <span class="links-of-author-item">
                    <a href="zhengmingfeng66@163.com" target="_blank" title="E-Mail">
                      
                        <i class="fa fa-fw fa-envelope"></i>E-Mail</a>
                  </span>
                
            </div>
          

          
          

          
          

          

        </div>
      </section>

      
      <!--noindex-->
        <section class="post-toc-wrap motion-element sidebar-panel sidebar-panel-active">
          <div class="post-toc">

            
              
            

            
              <div class="post-toc-content"><ol class="nav"><li class="nav-item nav-level-2"><a class="nav-link" href="#前言"><span class="nav-number">1.</span> <span class="nav-text">前言</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#什么是-webpack"><span class="nav-number">2.</span> <span class="nav-text">什么是 webpack ?</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#webpack-核心概念"><span class="nav-number">3.</span> <span class="nav-text">webpack 核心概念</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#Entry"><span class="nav-number">3.1.</span> <span class="nav-text">Entry</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#Output"><span class="nav-number">3.2.</span> <span class="nav-text">Output</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#Module"><span class="nav-number">3.3.</span> <span class="nav-text">Module</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#Chunk"><span class="nav-number">3.4.</span> <span class="nav-text">Chunk</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#Loader"><span class="nav-number">3.5.</span> <span class="nav-text">Loader</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#Plugin"><span class="nav-number">3.6.</span> <span class="nav-text">Plugin</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#webpack-构建流程"><span class="nav-number">4.</span> <span class="nav-text">webpack 构建流程</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#实践加深理解-撸一个简易-webpack"><span class="nav-number">5.</span> <span class="nav-text">实践加深理解,撸一个简易 webpack</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#1-定义-Compiler-类"><span class="nav-number">5.1.</span> <span class="nav-text">1. 定义 Compiler 类</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#2-解析入口文件-获取-AST"><span class="nav-number">5.2.</span> <span class="nav-text">2. 解析入口文件,获取 AST</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#3-找出所有依赖模块"><span class="nav-number">5.3.</span> <span class="nav-text">3. 找出所有依赖模块</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#4-AST-转换为-code"><span class="nav-number">5.4.</span> <span class="nav-text">4. AST 转换为 code</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#5-递归解析所有依赖项-生成依赖关系图"><span class="nav-number">5.5.</span> <span class="nav-text">5. 递归解析所有依赖项,生成依赖关系图</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#6-重写-require-函数-输出-bundle"><span class="nav-number">5.6.</span> <span class="nav-text">6. 重写 require 函数,输出 bundle</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#7-看完这节-彻底搞懂-bundle-实现"><span class="nav-number">5.7.</span> <span class="nav-text">7. 看完这节,彻底搞懂 bundle 实现</span></a><ol class="nav-child"><li class="nav-item nav-level-4"><a class="nav-link" href="#step-1-从入口文件开始执行"><span class="nav-number">5.7.1.</span> <span class="nav-text">step 1 : 从入口文件开始执行</span></a></li><li class="nav-item nav-level-4"><a class="nav-link" href="#step-2-使用-eval-执行代码"><span class="nav-number">5.7.2.</span> <span class="nav-text">step 2 : 使用 eval 执行代码</span></a></li><li class="nav-item nav-level-4"><a class="nav-link" href="#step-3-依赖对象寻址映射-获取-exports-对象"><span class="nav-number">5.7.3.</span> <span class="nav-text">step 3 : 依赖对象寻址映射,获取 exports 对象</span></a></li></ol></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#总结"><span class="nav-number">6.</span> <span class="nav-text">总结</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#参考"><span class="nav-number">7.</span> <span class="nav-text">参考</span></a></li></ol></div>
            

          </div>
        </section>
      <!--/noindex-->
      

      

    </div>
  </aside>


        
      </div>
    </main>

    <footer id="footer" class="footer">
      <div class="footer-inner">
        <div class="copyright">&copy; <span itemprop="copyrightYear">2020</span>
  <span class="with-love">
    <i class="fa fa-user"></i>
  </span>
  <span class="author" itemprop="copyrightHolder">jerry.zmf</span>

  
</div>









        
<div class="busuanzi-count">
  <script async src="https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"></script>
  
    <span class="site-uv">
      本站访客数<i class="fa fa-user"></i>
      <span class="busuanzi-value" id="busuanzi_value_site_uv"></span>
      人次
    </span>
  

  
    <span class="site-pv">
      本站总访问量<i class="fa fa-eye">
      <span class="busuanzi-value" id="busuanzi_value_site_pv"></span>
      次
    </i></span>
  
</div>








        
      </div>
    </footer>

    
      <div class="back-to-top">
        <i class="fa fa-arrow-up"></i>
        
      </div>
    

    

  </div>

  

<script type="text/javascript">
  if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {
    window.Promise = null;
  }
</script>









  












  
  
    <script type="text/javascript" src="/lib/jquery/index.js?v=2.1.3"></script>
  

  
  
    <script type="text/javascript" src="/lib/fastclick/lib/fastclick.min.js?v=1.0.6"></script>
  

  
  
    <script type="text/javascript" src="/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7"></script>
  

  
  
    <script type="text/javascript" src="/lib/velocity/velocity.min.js?v=1.2.1"></script>
  

  
  
    <script type="text/javascript" src="/lib/velocity/velocity.ui.min.js?v=1.2.1"></script>
  

  
  
    <script type="text/javascript" src="/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5"></script>
  


  


  <script type="text/javascript" src="/js/src/utils.js?v=5.1.4"></script>

  <script type="text/javascript" src="/js/src/motion.js?v=5.1.4"></script>



  
  


  <script type="text/javascript" src="/js/src/affix.js?v=5.1.4"></script>

  <script type="text/javascript" src="/js/src/schemes/pisces.js?v=5.1.4"></script>



  
  <script type="text/javascript" src="/js/src/scrollspy.js?v=5.1.4"></script>
<script type="text/javascript" src="/js/src/post-details.js?v=5.1.4"></script>



  


  <script type="text/javascript" src="/js/src/bootstrap.js?v=5.1.4"></script>



  


  




	





  





  










  <script src="//cdn1.lncld.net/static/js/3.0.4/av-min.js"></script>
  <script src="//cdn.jsdelivr.net/npm/valine/dist/Valine.min.js"></script>
  
  <script type="text/javascript">
    var GUEST = ['nick','mail','link'];
    var guest = 'nick,mail,link';
    guest = guest.split(',').filter(item=>{
      return GUEST.indexOf(item)>-1;
    });
    new Valine({
        el: '#comments' ,
        verify: false,
        notify: false,
        appId: 'd3fAtsswhuE41kGfGd3OT3M7-gzGzoHsz',
        appKey: 'Kc4nsTUGGdxKAqgTnRtQMIwD',
        placeholder: 'Leave a comment',
        avatar:'/images/head_icon.jpg',
        guest_info:guest,
        pageSize:'10' || 10,
    });
  </script>



  

  <script type="text/javascript">
    // Popup Window;
    var isfetched = false;
    var isXml = true;
    // Search DB path;
    var search_path = "search.xml";
    if (search_path.length === 0) {
      search_path = "search.xml";
    } else if (/json$/i.test(search_path)) {
      isXml = false;
    }
    var path = "/" + search_path;
    // monitor main search box;

    var onPopupClose = function (e) {
      $('.popup').hide();
      $('#local-search-input').val('');
      $('.search-result-list').remove();
      $('#no-result').remove();
      $(".local-search-pop-overlay").remove();
      $('body').css('overflow', '');
    }

    function proceedsearch() {
      $("body")
        .append('<div class="search-popup-overlay local-search-pop-overlay"></div>')
        .css('overflow', 'hidden');
      $('.search-popup-overlay').click(onPopupClose);
      $('.popup').toggle();
      var $localSearchInput = $('#local-search-input');
      $localSearchInput.attr("autocapitalize", "none");
      $localSearchInput.attr("autocorrect", "off");
      $localSearchInput.focus();
    }

    // search function;
    var searchFunc = function(path, search_id, content_id) {
      'use strict';

      // start loading animation
      $("body")
        .append('<div class="search-popup-overlay local-search-pop-overlay">' +
          '<div id="search-loading-icon">' +
          '<i class="fa fa-spinner fa-pulse fa-5x fa-fw"></i>' +
          '</div>' +
          '</div>')
        .css('overflow', 'hidden');
      $("#search-loading-icon").css('margin', '20% auto 0 auto').css('text-align', 'center');

      $.ajax({
        url: path,
        dataType: isXml ? "xml" : "json",
        async: true,
        success: function(res) {
          // get the contents from search data
          isfetched = true;
          $('.popup').detach().appendTo('.header-inner');
          var datas = isXml ? $("entry", res).map(function() {
            return {
              title: $("title", this).text(),
              content: $("content",this).text(),
              url: $("url" , this).text()
            };
          }).get() : res;
          var input = document.getElementById(search_id);
          var resultContent = document.getElementById(content_id);
          var inputEventFunction = function() {
            var searchText = input.value.trim().toLowerCase();
            var keywords = searchText.split(/[\s\-]+/);
            if (keywords.length > 1) {
              keywords.push(searchText);
            }
            var resultItems = [];
            if (searchText.length > 0) {
              // perform local searching
              datas.forEach(function(data) {
                var isMatch = false;
                var hitCount = 0;
                var searchTextCount = 0;
                var title = data.title.trim();
                var titleInLowerCase = title.toLowerCase();
                var content = data.content.trim().replace(/<[^>]+>/g,"");
                var contentInLowerCase = content.toLowerCase();
                var articleUrl = decodeURIComponent(data.url);
                var indexOfTitle = [];
                var indexOfContent = [];
                // only match articles with not empty titles
                if(title != '') {
                  keywords.forEach(function(keyword) {
                    function getIndexByWord(word, text, caseSensitive) {
                      var wordLen = word.length;
                      if (wordLen === 0) {
                        return [];
                      }
                      var startPosition = 0, position = [], index = [];
                      if (!caseSensitive) {
                        text = text.toLowerCase();
                        word = word.toLowerCase();
                      }
                      while ((position = text.indexOf(word, startPosition)) > -1) {
                        index.push({position: position, word: word});
                        startPosition = position + wordLen;
                      }
                      return index;
                    }

                    indexOfTitle = indexOfTitle.concat(getIndexByWord(keyword, titleInLowerCase, false));
                    indexOfContent = indexOfContent.concat(getIndexByWord(keyword, contentInLowerCase, false));
                  });
                  if (indexOfTitle.length > 0 || indexOfContent.length > 0) {
                    isMatch = true;
                    hitCount = indexOfTitle.length + indexOfContent.length;
                  }
                }

                // show search results

                if (isMatch) {
                  // sort index by position of keyword

                  [indexOfTitle, indexOfContent].forEach(function (index) {
                    index.sort(function (itemLeft, itemRight) {
                      if (itemRight.position !== itemLeft.position) {
                        return itemRight.position - itemLeft.position;
                      } else {
                        return itemLeft.word.length - itemRight.word.length;
                      }
                    });
                  });

                  // merge hits into slices

                  function mergeIntoSlice(text, start, end, index) {
                    var item = index[index.length - 1];
                    var position = item.position;
                    var word = item.word;
                    var hits = [];
                    var searchTextCountInSlice = 0;
                    while (position + word.length <= end && index.length != 0) {
                      if (word === searchText) {
                        searchTextCountInSlice++;
                      }
                      hits.push({position: position, length: word.length});
                      var wordEnd = position + word.length;

                      // move to next position of hit

                      index.pop();
                      while (index.length != 0) {
                        item = index[index.length - 1];
                        position = item.position;
                        word = item.word;
                        if (wordEnd > position) {
                          index.pop();
                        } else {
                          break;
                        }
                      }
                    }
                    searchTextCount += searchTextCountInSlice;
                    return {
                      hits: hits,
                      start: start,
                      end: end,
                      searchTextCount: searchTextCountInSlice
                    };
                  }

                  var slicesOfTitle = [];
                  if (indexOfTitle.length != 0) {
                    slicesOfTitle.push(mergeIntoSlice(title, 0, title.length, indexOfTitle));
                  }

                  var slicesOfContent = [];
                  while (indexOfContent.length != 0) {
                    var item = indexOfContent[indexOfContent.length - 1];
                    var position = item.position;
                    var word = item.word;
                    // cut out 100 characters
                    var start = position - 20;
                    var end = position + 80;
                    if(start < 0){
                      start = 0;
                    }
                    if (end < position + word.length) {
                      end = position + word.length;
                    }
                    if(end > content.length){
                      end = content.length;
                    }
                    slicesOfContent.push(mergeIntoSlice(content, start, end, indexOfContent));
                  }

                  // sort slices in content by search text's count and hits' count

                  slicesOfContent.sort(function (sliceLeft, sliceRight) {
                    if (sliceLeft.searchTextCount !== sliceRight.searchTextCount) {
                      return sliceRight.searchTextCount - sliceLeft.searchTextCount;
                    } else if (sliceLeft.hits.length !== sliceRight.hits.length) {
                      return sliceRight.hits.length - sliceLeft.hits.length;
                    } else {
                      return sliceLeft.start - sliceRight.start;
                    }
                  });

                  // select top N slices in content

                  var upperBound = parseInt('1');
                  if (upperBound >= 0) {
                    slicesOfContent = slicesOfContent.slice(0, upperBound);
                  }

                  // highlight title and content

                  function highlightKeyword(text, slice) {
                    var result = '';
                    var prevEnd = slice.start;
                    slice.hits.forEach(function (hit) {
                      result += text.substring(prevEnd, hit.position);
                      var end = hit.position + hit.length;
                      result += '<b class="search-keyword">' + text.substring(hit.position, end) + '</b>';
                      prevEnd = end;
                    });
                    result += text.substring(prevEnd, slice.end);
                    return result;
                  }

                  var resultItem = '';

                  if (slicesOfTitle.length != 0) {
                    resultItem += "<li><a href='" + articleUrl + "' class='search-result-title'>" + highlightKeyword(title, slicesOfTitle[0]) + "</a>";
                  } else {
                    resultItem += "<li><a href='" + articleUrl + "' class='search-result-title'>" + title + "</a>";
                  }

                  slicesOfContent.forEach(function (slice) {
                    resultItem += "<a href='" + articleUrl + "'>" +
                      "<p class=\"search-result\">" + highlightKeyword(content, slice) +
                      "...</p>" + "</a>";
                  });

                  resultItem += "</li>";
                  resultItems.push({
                    item: resultItem,
                    searchTextCount: searchTextCount,
                    hitCount: hitCount,
                    id: resultItems.length
                  });
                }
              })
            };
            if (keywords.length === 1 && keywords[0] === "") {
              resultContent.innerHTML = '<div id="no-result"><i class="fa fa-search fa-5x" /></div>'
            } else if (resultItems.length === 0) {
              resultContent.innerHTML = '<div id="no-result"><i class="fa fa-frown-o fa-5x" /></div>'
            } else {
              resultItems.sort(function (resultLeft, resultRight) {
                if (resultLeft.searchTextCount !== resultRight.searchTextCount) {
                  return resultRight.searchTextCount - resultLeft.searchTextCount;
                } else if (resultLeft.hitCount !== resultRight.hitCount) {
                  return resultRight.hitCount - resultLeft.hitCount;
                } else {
                  return resultRight.id - resultLeft.id;
                }
              });
              var searchResultList = '<ul class=\"search-result-list\">';
              resultItems.forEach(function (result) {
                searchResultList += result.item;
              })
              searchResultList += "</ul>";
              resultContent.innerHTML = searchResultList;
            }
          }

          if ('auto' === 'auto') {
            input.addEventListener('input', inputEventFunction);
          } else {
            $('.search-icon').click(inputEventFunction);
            input.addEventListener('keypress', function (event) {
              if (event.keyCode === 13) {
                inputEventFunction();
              }
            });
          }

          // remove loading animation
          $(".local-search-pop-overlay").remove();
          $('body').css('overflow', '');

          proceedsearch();
        }
      });
    }

    // handle and trigger popup window;
    $('.popup-trigger').click(function(e) {
      e.stopPropagation();
      if (isfetched === false) {
        searchFunc(path, 'local-search-input', 'local-search-result');
      } else {
        proceedsearch();
      };
    });

    $('.popup-btn-close').click(onPopupClose);
    $('.popup').click(function(e){
      e.stopPropagation();
    });
    $(document).on('keyup', function (event) {
      var shouldDismissSearchPopup = event.which === 27 &&
        $('.search-popup').is(':visible');
      if (shouldDismissSearchPopup) {
        onPopupClose();
      }
    });
  </script>





  

  

  
<script>
(function(){
    var bp = document.createElement('script');
    var curProtocol = window.location.protocol.split(':')[0];
    if (curProtocol === 'https') {
        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';        
    }
    else {
        bp.src = 'http://push.zhanzhang.baidu.com/push.js';
    }
    var s = document.getElementsByTagName("script")[0];
    s.parentNode.insertBefore(bp, s);
})();
</script>


  
  

  

  

  

</body>
</html>
